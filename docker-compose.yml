
services:
  # MySQL Database Service
#  mysql:
#    image: mysql:8.0
#    container_name: mysql
#    cap_add:
#      - SYS_NICE
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    ports:
#      - '3307:3306'
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
#    networks:
#      - backend
#    healthcheck:
#      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #  redis:
  #    image: redis:6.2-alpine
  #    container_name: redis
  #    hostname: redis
  #    ports:
  #      - '6379:6379'
  #    environment:
  #      - ALLOW_EMPTY_PASSWORD=yes
  #      - REDIS_DISABLE_COMMANDS=FLUSHDB;FLUSHALL
  #    networks:
  #      - backend
  #
  #  zookeeper:
  #    image: confluentinc/cp-zookeeper:latest
  #    container_name: zookeeper
  #    environment:
  #      ZOOKEEPER_CLIENT_PORT: 2181
  #      ZOOKEEPER_TICK_TIME: 2000
  #    ports:
  #      - '22181:2181'
  #    healthcheck:
  #      test: [ "CMD", "echo", "ruok", "|", "nc", "-z", "localhost", "2181" ]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5
  #
  #  kafka:
  #    image: confluentinc/cp-kafka:latest
  #    container_name: kafka
  #    depends_on:
  #      zookeeper:
  #        condition: service_healthy
  #    ports:
  #      - '29092:29092'
  #    environment:
  #      KAFKA_BROKER_ID: 1
  #      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Spring Boot Application Service
  api-service:
    container_name: fortis_backend
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '8080:8080'
    networks:
      - backend
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fortis?
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

volumes:
  mysql_data:

#  api-service-test:
#    container_name: api-container-2
#    image: api-image-sample
#    ports:
#      - '8081:8080'
#    networks:
#      - backend
networks:
  backend:
    driver: bridge